/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wirtualnakamera.camera;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.List;
import wirtualnakamera.geology.Map;
import wirtualnakamera.geology.Point;
import wirtualnakamera.geology.Polygon;

/**
 *
 * @author itoneer
 */
public class CameraPanel extends javax.swing.JPanel {

    private static CameraPanel panel = null;
    
    private List<Pixel[]> lines;
    
    /**
     * Creates new form CameraPanel
     */
    public CameraPanel() {
        lines = new ArrayList<>();
        initComponents();
        setBackground(Color.BLACK);
    }
    
    public static CameraPanel getPanel() {
        if (panel == null) panel = new CameraPanel();
        return panel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
	super.paintComponent(g);
	Graphics2D g2d = (Graphics2D) g;

	g2d.setColor(Color.BLUE);

        lines.forEach((line) -> {
            
        });
    }
    
    void redraw(Map map, double focal) {
        Point p1, p2;
        for (Polygon p: map.getWalls()) {
            for (int i = 0; i < p.getVertices().size()-1; i++) {
                p1 = p.getVertices().get(i);
                p2 = p.getVertices().get(i+1);
                if (!p1.isDrawable(focal) || !p2.isDrawable(focal)) continue;
                lines.add(new Pixel[] {p1.toPixel(), p2.toPixel()});
            }
            
            p1 = p.getVertices().get(p.getVertices().size()-1);
            p2 = p.getVertices().get(0);
            if (!p1.isDrawable(focal) || !p2.isDrawable(focal)) continue;
            lines.add(new Pixel[] {p1.toPixel(), p2.toPixel()});
        }
        panel.repaint();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
