/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wirtualnakamera.camera;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import wirtualnakamera.geology.Polygon;
import java.util.ArrayList;
import java.util.List;
import wirtualnakamera.geology.Map;
import wirtualnakamera.geology.Point;

/**
 *
 * @author itoneer
 */
public class CameraPanel extends javax.swing.JPanel {

    private static CameraPanel panel = null;
    
    private List<java.awt.Point[]> lines;
    private List<Polygon> polys;
    private List<Point> lightSources;
    private PhongRenderer renderer;
    
    /**
     * Creates new form CameraPanel
     */
    public CameraPanel() {
        lines = new ArrayList<>();
        polys = new ArrayList();
        initComponents();
        setBackground(Color.BLACK);
        setFocusable(true);
        lightSources = null;
        renderer = new PhongRenderer();
    }
    
    public static CameraPanel getPanel() {
        if (panel == null) panel = new CameraPanel();
        return panel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMinimumSize(new java.awt.Dimension(600, 300));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        
    }//GEN-LAST:event_formKeyTyped

    @Override
    protected void paintComponent(Graphics g) {
	super.paintComponent(g);
	Graphics2D g2d = (Graphics2D) g;

	/*g2d.setColor(Color.CYAN);
        
        lines.forEach((line) -> {
           g2d.drawLine((int) line[0].getX(), (int) line[0].getY(), (int) line[1].getX(), (int) line[1].getY());
        });*/
        
        /*polys.forEach((poly) -> {
            g2d.setColor(poly.getColor());
            g2d.fillPolygon(poly.toAwt());
            
        });*/
        
        renderer.render(polys, g2d, lightSources);
        
    }
    
    /*public void redraw(Map map, double focal) {
        lines = new ArrayList<>();
        wirtualnakamera.geology.Point p1, p2;
        for (Polygon p: map.getWalls()) {
            if (!p.isDrawable(focal)) continue;
            for (int i = 0; i < p.getVertices().size()-1; i++) {
                p1 = p.getVertices().get(i);
                p2 = p.getVertices().get(i+1);
                if (!p1.isDrawable(focal) || !p2.isDrawable(focal)) continue;
                lines.add(new java.awt.Point[] {p1.toPoint2D(), p2.toPoint2D()});
            }
            
            p1 = p.getVertices().get(p.getVertices().size()-1);
            p2 = p.getVertices().get(0);
            if (!p1.isDrawable(focal) || !p2.isDrawable(focal)) continue;
            lines.add(new java.awt.Point[] {p1.toPoint2D(), p2.toPoint2D()});
        }
    }*/
    
    public void redraw(Map map, double focal) {
        if (lightSources == null) lightSources = map.getLightSources();
        List<Polygon> toDraw = new ArrayList(map.getWalls());
        
        List<Polygon> td2 = new ArrayList(toDraw);
        
        for (Polygon p: toDraw) {
            if (!p.isDrawable(focal)) td2.remove(p);
        }
        
        toDraw = td2;
        td2 = new ArrayList();
        
        for (Polygon p: toDraw) {
            List<Polygon> decompo = p.divide(); //p.breakdown();
            td2.addAll(decompo);
        }
        
        toDraw = td2;
                        
        toDraw.sort((Polygon o1, wirtualnakamera.geology.Polygon o2) -> {
            wirtualnakamera.geology.Point c1 = o1.getCentroid();
            wirtualnakamera.geology.Point c2 = o2.getCentroid();
            double len1 = Math.sqrt(c1.getX()*c1.getX() + c1.getY()*c1.getY() + c1.getZ()*c1.getZ());
            double len2 = Math.sqrt(c2.getX()*c2.getX() + c2.getY()*c2.getY() + c2.getZ()*c2.getZ());
            return -1* Double.compare(len1, len2);
        });
        
        polys = toDraw;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
